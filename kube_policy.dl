import node
import pod
import metadata

output relation PodExists(name: string, status: string)
output relation NodeExists(name: string, status: string)

PodExists(name, status) :-
            Pod(meta, _, pstatus),
            var name = meta.name.unwrap_or_default(),
            var status = pstatus.pod_ip.unwrap_or_default().


NodeExists(name, status) :-
            Node(meta, _, nstatus),
            var name = meta.name.unwrap_or_default(),
            var status = nstatus.node_info.unwrap_or_default().system_uuid.

output relation PodOnNode(pod_id: string, node_id: string)

PodOnNode(pod_id, node_id) :-
    Pod(meta, spec, _),
    var pod_id = meta.name.unwrap_or_default(),
    var node_id = spec.node_name.unwrap_or_default().

output relation NodeAffinitySatisfied(pod_id : string)

function check_node_affinity(pod : Pod, node : Node) : bool {
    pod.spec.node_name.unwrap_or_default() == node.metadata.name.unwrap_or_default()
}

NodeAffinitySatisfied(pod_id) :-
    PodOnNode(pod_id, node_id),
    pod in Pod(.metadata = ObjectMeta{.name = Some{pod_id}}),
    node in Node(.metadata = ObjectMeta{.name = Some{node_id}}),
    check_node_affinity(pod, node).

// I probably oversimplified this a bit too much.
// We need to do PodAffinitySatisfied  check for each PodAffinityTerm
// of the pod and then aggregate to check that all affinity constraints are satisfied.
/*
relation PodAffinitySatisfied(pod_id)

PodAffinitySatisfied(pod.id) :-
    Pod(meta, _, pstatus),
    PodOnNode(pod.id, node_id),
    PodOnNode(other_pod_id, node_id),
    other_pod_id != pod.id,
    other_pod in Pod(.id = other_pod_id),
    check_pod_affinity(pod, other_pod).
*/
