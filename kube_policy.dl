import node
import pod
import metadata
import affinity

output relation PodExists(name: string, status: string)
output relation NodeExists(name: string, status: string)

PodExists(name, status) :-
            Pod(meta, _, pstatus),
            var name = meta.name.unwrap_or_default(),
            var status = pstatus.pod_ip.unwrap_or_default().


NodeExists(name, status) :-
            Node(meta, _, nstatus),
            var name = meta.name.unwrap_or_default(),
            var status = nstatus.node_info.unwrap_or_default().system_uuid.

output relation PodOnNode(pod_id: string, node_id: string)

PodOnNode(pod_id, node_id) :-
    Pod(meta, spec, _),
    var pod_id = meta.name.unwrap_or_default(),
    var node_id = spec.node_name.unwrap_or_default().

output relation NodeAffinitySatisfied(pod_id : string)

function check_node_affinity(pod : Pod, node : Node) : Option<bool> {
    var node_sel = pod.spec.affinity?.node_affinity?.required?;
    for (term in node_sel.terms) {
      for (expr in term.match_expressions?) {
          /*match (expr.operator) {
            "In" -> {

            },
            _ -> { },

          };*/
      };
    };
    var ret = if (pod.spec.node_name.unwrap_or_default() == node.metadata.name.unwrap_or_default()) {
      Some{(true)}
    } else {
      None
    };
    ret
}

NodeAffinitySatisfied(pod_id) :-
    PodOnNode(pod_id, node_id),
    pod in Pod(.metadata = ObjectMeta{.name = Some{pod_id}}),
    node in Node(.metadata = ObjectMeta{.name = Some{node_id}}),
    check_node_affinity(pod, node).unwrap_or_default().

relation PodAffinityTermSatisfied(pod_id : string, terms : Set<PodAffinityTerm>)

function get_satisfied_affinity_terms(pod : Pod, other_pod : Pod, node : Node) : Set<PodAffinityTerm> {
  var s : Set<PodAffinityTerm> = default();
  var pa_terms = pod.spec.affinity.unwrap_or_default().pod_affinity.unwrap_or_default().required.unwrap_or_default();

  var node_labels = node.metadata.labels.unwrap_or_default();

  for (term in pa_terms) {
    // if topology_key doesn't match, can we return early?
    if (node_labels.contains_key(term.topology_key) == false) {
      continue
    };
    if (labelSelectorMatches(term.label_selector, other_pod.metadata.labels.unwrap_or_default())) {
      s.insert(term)
    }
  };
  s
}

PodAffinityTermSatisfied(pod_id, terms) :-
    PodOnNode(pod_id, node_id),
    PodOnNode(other_pod_id, node_id),
    other_pod_id != pod_id,
    other_pod in Pod(.metadata = ObjectMeta{.name = Some{other_pod_id}}),
    pod in Pod(.metadata = ObjectMeta{.name = Some{pod_id}}),
    node in Node(.metadata = ObjectMeta{.name = Some{node_id}}),
    var terms = get_satisfied_affinity_terms(pod, other_pod, node).

relation PodAffinitySatisfied(pod_id : string)

PodAffinitySatisfied(pod_id) :-
    PodAffinityTermSatisfied(pod_id, terms),
    var all_satisfied_terms = terms.group_by(pod_id).union(),
    Pod(.metadata = ObjectMeta{.name = Some{pod_id}}, .spec= PodSpec{.affinity=Some{Affinity{.pod_affinity={Some{PodAffinity{.required=Some{pod_af_terms}}}}}}}),
    pod_af_terms.to_set() == all_satisfied_terms.
